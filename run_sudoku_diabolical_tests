#!/usr/bin/bash
#check for n_sudokus argument
if [[ $# -lt 1 || $# -gt 1 ]] ; then
	echo 'Wrong arguments provided'
	exit 1
fi
declare -a diabolical_sudoku_puzzles
exec_file="sudoku_remake"
input="./ressources/diabolical.txt"
n_sudokus=$1
n=0
#some diabolical puzzles (n_sudokus) to test from the file
while IFS= read -r line
do
  hash=$(echo "$line" | awk '{print $1}')
  diabolical_sudoku_puzzles[${#diabolical_sudoku_puzzles[@]}]="$hash"
  ((n++))
  if [[ n -eq n_sudokus ]]; then
    break;
  fi
done < "$input"
#make compile main sudoku solving C program
make clean && make
#set variables
stats_file="./benchmark/diabolical/stats-$$.txt"
n=0
#try the diabolical puzzles
for i in "${diabolical_sudoku_puzzles[@]}"
do
    result=$(./bin/$exec_file "diabolical.txt" "$i")
    echo -e "$result"
    #get the execution time for the x axis and the final cost of the algorithm for the y axis
    exec_time=$(echo "$result" | grep ">> CPU Execution time of the sudoku solving simulation :" | awk 'NF>1{print $NF}')
    end_cost=$(echo "$result" | grep ">> Best solution (lowest cost) found during the execution of the simulation :" | awk 'NF>1{print $NF}')
    echo "$exec_time $end_cost" >> "$stats_file"
done
#create benchmark graph
./bin/benchmark "6" "$stats_file"
#rm -r "fit.log"