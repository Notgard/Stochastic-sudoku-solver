#!/usr/bin/bash
#check for n_sudokus argument
if [[ $# -lt 1 || $# -gt 1 ]] ; then
	echo 'Wrong arguments provided'
	exit 1
fi
declare -a easy_sudoku_puzzles
input="./ressources/easy.txt"
n_sudokus=$1
n=0
#some easy puzzles (n_sudokus) to test from the file
while IFS= read -r line
do
  hash=$(echo "$line" | awk '{print $1}')
  easy_sudoku_puzzles[${#easy_sudoku_puzzles[@]}]="$hash"
  ((n++))
  if [[ n -eq n_sudokus ]]; then
    break;
  fi
done < "$input"
#make compile main sudoku solving C program
make clean && make
#set variables
stats_file="./benchmark/easy/stats-$$.txt"
sum_exec=0.0
sum_cost=0
sum_pow_exec=0.0
sum_exec_cost=0.0
n=0
#try the easy puzzles
for i in "${easy_sudoku_puzzles[@]}"
do
    result=$(./bin/main "easy.txt" "$i")
    echo -e "$result"
    #get the execution time for the x axis and the final cost of the algorithm for the y axis
    exec_time=$(echo "$result" | grep ">> CPU Execution time of the sudoku solving simulation :" | awk 'NF>1{print $NF}')
    end_cost=$(echo "$result" | grep ">> Best solution (lowest cost) found during the execution of the simulation :" | awk 'NF>1{print $NF}')
    echo "$exec_time $end_cost" >> "$stats_file"
    #sum_exec=$(echo "$sum_exec + $exec_time" | bc -l)
    #sum_cost=$(echo "$sum_cost + $end_cost" | bc -l)
    #sum_pow_exec=$(echo "$sum_pow_exec + $exec_time^2" | bc -l)
    #sum_exec_cost=$(echo "$sum_exec_cost + $exec_time * $end_cost" | bc -l)
    #n+=1
done
#calculate m and b for standard curve
#https://www.statisticshowto.com/probability-and-statistics/regression-analysis/find-a-linear-regression-equation/
#m=$(echo "($n * $sum_exec_cost - $sum_exec * $sum_cost) / ($n * $sum_pow_exec - $sum_exec^2)" | bc -l)
#b=$(echo "($sum_cost - $m * $sum_exec) / $n" | bc -l)
#echo -e " $m $b"
#create benchmark graph
./bin/benchmark "1" "$stats_file" #"$m" "$b"
#rm -r "fit.log"