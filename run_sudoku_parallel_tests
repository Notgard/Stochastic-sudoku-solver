#!/usr/bin/bash
#check for n_sudokus argument
if [[ $# -lt 1 || $# -gt 1 ]] ; then
	echo 'Wrong arguments provided, must provide number of tests'
	exit 1
fi
declare -a easy_sudoku_puzzles
input="./ressources/easy.txt"
n_sudokus=$1
n=0
#some easy puzzles (n_sudokus) to test from the file
while IFS= read -r line
do
  hash=$(echo "$line" | awk '{print $1}')
  easy_sudoku_puzzles[${#easy_sudoku_puzzles[@]}]="$hash"
  ((n++))
  if [[ n -eq n_sudokus ]]; then
    break;
  fi
done < "$input"
#make compile main sudoku solving C program
make clean && make
#set variables
pid=$$
stats_file="./data/parallel/stats-$pid.txt"
#sequential tests
threads=1
for i in "${easy_sudoku_puzzles[@]}"
do
    result=$(./bin/sudoku_remake "easy.txt" "$i")
    echo -e "$result"
    #get the execution time for the x axis and the final cost of the algorithm for the y axis
    exec_time=$(echo "$result" | grep ">> CPU Execution time of the sudoku solving simulation :" | awk 'NF>1{print $NF}')
    end_cost=$(echo "$result" | grep ">> Best solution (lowest cost) found during the execution of the simulation :" | awk 'NF>1{print $NF}')
    tries=$(echo "$result" | grep ">> Numbers of tries taken : " | awk 'NF>1{print $NF}')
    echo "$threads $exec_time" >> "$stats_file"
    ((threads++))
done
#make compile with parallel target directive
make clean && make parallel
#parallel tests
stats_file_p="./data/parallel/stats-p-$pid.txt"
threads=1
for i in "${easy_sudoku_puzzles[@]}"
do
    result=$(OMP_NUM_THREADS=$threads ./bin/sudoku_remake "easy.txt" "$i")
    echo -e "$result"
    #get the execution time for the x axis and the final cost of the algorithm for the y axis
    exec_time=$(echo "$result" | grep ">> CPU Execution time of the sudoku solving simulation :" | awk 'NF>1{print $NF}')
    end_cost=$(echo "$result" | grep ">> Best solution (lowest cost) found during the execution of the simulation :" | awk 'NF>1{print $NF}')
    tries=$(echo "$result" | grep ">> Numbers of tries taken : " | awk 'NF>1{print $NF}')
    echo "$threads $exec_time" >> "$stats_file_p"
    ((threads++))
done
#create benchmark graph
#./bin/benchmark "1" "$stats_file" #"$m" "$b"
#rm -r "fit.log"
./bin/stats $stats_file "sequentielle" $stats_file_p "parallel"