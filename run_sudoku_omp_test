#!/usr/bin/bash
#check for n_sudokus argument
if [[ $# -lt 1 || $# -gt 1 ]] ; then
	echo 'Wrong arguments provided, must provide number of threads'
	exit 1
fi
declare -a sudoku_puzzles
difficulty="diabolical"
input="./ressources/$difficulty.txt"
n_sudokus=100
n=0
n_threads=$1
#some easy puzzles (n_sudokus) to test from the file
while IFS= read -r line
do
  hash=$(echo "$line" | awk '{print $1}')
  sudoku_puzzles[${#sudoku_puzzles[@]}]="$hash"
  ((n++))
  if [[ n -eq n_sudokus ]]; then
    break;
  fi
done < "$input"
#pick random sudoku
rand_n=$((1 + $RANDOM % $n_sudokus))
rand_sudoku=${sudoku_puzzles[$rand_n]}
echo -e "Sudoku selected : '$rand_sudoku'"
#make compile main sudoku solving C program
make clean && make
#set variables
pid=$$
stats_file="./data/parallel/omp-stats-$pid.txt"
#sequential tests
threads=1
for ((i = 1; i < n_threads; i++)); do
    result=$(./bin/sudoku_remake "$difficulty.txt" "$rand_sudoku")
    echo -e "$result"
    #get the execution time for the x axis and the final cost of the algorithm for the y axis
    exec_time=$(echo "$result" | grep ">> CPU Execution time of the sudoku solving simulation :" | awk 'NF>1{print $NF}')
    end_cost=$(echo "$result" | grep ">> Best solution (lowest cost) found during the execution of the simulation :" | awk 'NF>1{print $NF}')
    tries=$(echo "$result" | grep ">> Numbers of tries taken : " | awk 'NF>1{print $NF}')
    printf "%d %.3f\n" "$threads" "$exec_time" >> "$stats_file"
    #echo "$threads $exec_time" >> "$stats_file"
    ((threads++))
done
#make compile with omp target directive
make clean && make omp
#parallel tests
stats_file_p="./data/parallel/omp-stats-p-$pid.txt"
threads=1
for ((i = 1; i < n_threads; i++)); do
    result=$(OMP_NUM_THREADS=$threads ./bin/sudoku_omp "-v" "$difficulty.txt" "$rand_sudoku")
    echo -e "$result"
    #get the execution time for the x axis and the final cost of the algorithm for the y axis
    exec_time=$(echo "$result" | grep ">> CPU Execution time of the sudoku solving simulation :" | awk 'NF>1{print $NF}')
    end_cost=$(echo "$result" | grep ">> Best solution (lowest cost) found during the execution of the simulation :" | awk 'NF>1{print $NF}')
    tries=$(echo "$result" | grep ">> Numbers of tries taken : " | awk 'NF>1{print $NF}')
    printf "%d %.3f\n" "$threads" "$exec_time" >> "$stats_file_p"
    #echo "$threads $exec_time" >> "$stats_file_p"
    ((threads++))
done
#create benchmark graph
#./bin/benchmark "1" "$stats_file" #"$m" "$b"
#rm -r "fit.log"
./bin/stats $stats_file "Sequentielle" $stats_file_p "OpenMP"